generator client {
  provider        = "prisma-client-js"
  // MongoDB no longer needs “mongodb” in previewFeatures as of Prisma 5+
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @map("_id") @default(auto()) @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @map("_id") @default(auto()) @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]
  companies     Company[]
  Employee      Employee[]
}

model VerificationToken {
  // **You must have exactly one @id** on MongoDB models
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Company {
  id         String     @id @map("_id") @default(auto()) @db.ObjectId
  name       String
  createdAt  DateTime   @default(now())
  userId     String     @db.ObjectId
  themeColor String?
  textColor  String?

  user       User       @relation(fields: [userId], references: [id])
  employees  Employee[]
}

model Employee {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  firstName  String
  lastName   String
  createdAt  DateTime @default(now())
  companyId  String   @db.ObjectId
  managerId  String   @db.ObjectId

  company    Company  @relation(fields: [companyId], references: [id])
  manager    User     @relation(fields: [managerId], references: [id])
  tasks      Task[]
}

model Task {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  title       String
  description String?
  createdAt   DateTime @default(now())
  employeeId  String   @db.ObjectId
  completed   Boolean  @default(false)

  employee    Employee @relation(fields: [employeeId], references: [id])
}